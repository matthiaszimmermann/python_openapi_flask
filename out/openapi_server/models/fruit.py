# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Fruit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, description=None, pick_date=None, weight=None):  # noqa: E501
        """Fruit - a model defined in OpenAPI

        :param id: The id of this Fruit.  # noqa: E501
        :type id: str
        :param name: The name of this Fruit.  # noqa: E501
        :type name: str
        :param description: The description of this Fruit.  # noqa: E501
        :type description: str
        :param pick_date: The pick_date of this Fruit.  # noqa: E501
        :type pick_date: datetime
        :param weight: The weight of this Fruit.  # noqa: E501
        :type weight: float
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'description': str,
            'pick_date': datetime,
            'weight': float
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'pick_date': 'pick_date',
            'weight': 'weight'
        }

        self._id = id
        self._name = name
        self._description = description
        self._pick_date = pick_date
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt) -> 'Fruit':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Fruit of this Fruit.  # noqa: E501
        :rtype: Fruit
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Fruit.

        Unique id of the fruit  # noqa: E501

        :return: The id of this Fruit.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Fruit.

        Unique id of the fruit  # noqa: E501

        :param id: The id of this Fruit.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Fruit.

        The name of the fruit  # noqa: E501

        :return: The name of this Fruit.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Fruit.

        The name of the fruit  # noqa: E501

        :param name: The name of this Fruit.
        :type name: str
        """
        if name is not None and len(name) > 32:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `32`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Fruit.

        Description for this fruit  # noqa: E501

        :return: The description of this Fruit.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Fruit.

        Description for this fruit  # noqa: E501

        :param description: The description of this Fruit.
        :type description: str
        """
        if description is not None and len(description) > 128:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `128`")  # noqa: E501

        self._description = description

    @property
    def pick_date(self):
        """Gets the pick_date of this Fruit.

        Date and time when the fruit has been picked  # noqa: E501

        :return: The pick_date of this Fruit.
        :rtype: datetime
        """
        return self._pick_date

    @pick_date.setter
    def pick_date(self, pick_date):
        """Sets the pick_date of this Fruit.

        Date and time when the fruit has been picked  # noqa: E501

        :param pick_date: The pick_date of this Fruit.
        :type pick_date: datetime
        """

        self._pick_date = pick_date

    @property
    def weight(self):
        """Gets the weight of this Fruit.

        Weight of this fruit in grams (g)  # noqa: E501

        :return: The weight of this Fruit.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Fruit.

        Weight of this fruit in grams (g)  # noqa: E501

        :param weight: The weight of this Fruit.
        :type weight: float
        """
        if weight is not None and weight > 10000.0:  # noqa: E501
            raise ValueError("Invalid value for `weight`, must be a value less than or equal to `10000.0`")  # noqa: E501
        if weight is not None and weight < 0.1:  # noqa: E501
            raise ValueError("Invalid value for `weight`, must be a value greater than or equal to `0.1`")  # noqa: E501

        self._weight = weight
